
@article{salehie_towards_2012,
	title = {Towards a {Goal}-driven {Approach} to {Action} {Selection} in {Self}-adaptive {Software}},
	volume = {42},
	issn = {0038-0644},
	url = {http://dx.doi.org/10.1002/spe.1066},
	doi = {10.1002/spe.1066},
	number = {2},
	journal = {Softw. Pract. Exper.},
	author = {Salehie, Mazeiar and Tahvildari, Ladan},
	month = feb,
	year = {2012},
	keywords = {goal-driven model, run-time action selection, self-adaptive software},
	pages = {211--233}
}

@article{ali_goal-based_2010,
	title = {A goal-based framework for contextual requirements modeling and analysis},
	volume = {15},
	issn = {0947-3602, 1432-010X},
	url = {http://link.springer.com/article/10.1007/s00766-010-0110-z},
	doi = {10.1007/s00766-010-0110-z},
	abstract = {Requirements engineering (RE) research often ignores or presumes a uniform nature of the context in which the system operates. This assumption is no longer valid in emerging computing paradigms, such as ambient, pervasive and ubiquitous computing, where it is essential to monitor and adapt to an inherently varying context. Besides influencing the software, context may influence stakeholders’ goals and their choices to meet them. In this paper, we propose a goal-oriented RE modeling and reasoning framework for systems operating in varying contexts. We introduce contextual goal models to relate goals and contexts; context analysis to refine contexts and identify ways to verify them; reasoning techniques to derive requirements reflecting the context and users priorities at runtime; and finally, design time reasoning techniques to derive requirements for a system to be developed at minimum cost and valid in all considered contexts. We illustrate and evaluate our approach through a case study about a museum-guide mobile information system.},
	language = {en},
	number = {4},
	urldate = {2015-05-03},
	journal = {Requirements Engineering},
	author = {Ali, Raian and Dalpiaz, Fabiano and Giorgini, Paolo},
	month = jul,
	year = {2010},
	keywords = {Context analysis, Contextual requirements, Goal modeling, Requirements analysis, Software Engineering},
	pages = {439--458},
	file = {A Goal-based Framework for Contextual Requirements Modeling and Analysis.pdf:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/XH5TGKII/A Goal-based Framework for Contextual Requirements Modeling and Analysis.pdf:application/pdf;Snapshot:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/RVTEVWEW/10.html:text/html}
}

@misc{mendonca_dependability_2015,
	title = {Dependability {Verification} for {Contextual}/{Runtime} {Goal} {Modelling}},
	author = {Mendonça, Danilo},
	year = {2015},
	file = {Dependability Verification for Contextual/Runtime Goal Modelling:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/CX49JGSF/Masters' Dissertation - Danilo Mendonça.pdf:application/pdf}
}

@article{avizienis_basic_2004,
	title = {Basic concepts and taxonomy of dependable and secure computing},
	volume = {1},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1335465},
	number = {1},
	urldate = {2015-07-14},
	journal = {Dependable and Secure Computing, IEEE Transactions on},
	author = {Avižienis, Algirdas and Laprie, Jean-Claude and Randell, Brian and Landwehr, Carl},
	year = {2004},
	pages = {11--33},
	file = {Aula 2 - BasicConceptsDependabilitySecurity.pdf:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/AMU924XQ/Aula 2 - BasicConceptsDependabilitySecurity.pdf:application/pdf}
}

@techreport{laddaga_self_????,
	title = {Self {Adaptive} {Software} {SOL} {BAA} 98-12},
	url = {http://people.csail.mit.edu/rladdaga/BAA98-12excerpt.html},
	urldate = {2015-09-01},
	author = {Laddaga, Robbert},
	file = {BAA 98-xx PROPOSER INFORMATION PAMPHLET:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/6884FBGB/BAA98-12excerpt.html:text/html}
}

@inproceedings{gunalp_autonomic_2012,
	address = {New York, NY, USA},
	series = {Self-{IoT} '12},
	title = {Autonomic {Pervasive} {Applications} {Driven} by {Abstract} {Specifications}},
	isbn = {978-1-4503-1753-5},
	url = {http://doi.acm.org/10.1145/2378023.2378028},
	doi = {10.1145/2378023.2378028},
	abstract = {Pervasive application architectures present stringent requirements that make their development especially hard. In particular, they need to be flexible in order to cope with dynamism in different forms (e.g. service and data providers and consumers). The current trend to build applications out of remote services makes the availability of constituent application components inherently dynamic. Developers can no longer assume that applications are static after development or at run time. Unfortunately, developing applications that are able to cope with dynamism is very complex. Existing development approaches do not provide explicit support for managing dynamism. In this paper we describe Rondo, a tool suite for designing pervasive applications. More specifically, we present our propositions in pervasive application specification, which borrows concepts from service-oriented component assembly, model-driven engineering (MDE) and continuous deployment, resulting in a more flexible approach than traditional application definitions. Then the capabilities of our application model are demonstrated with an example application scenario designed using our approach.},
	urldate = {2015-09-02},
	booktitle = {Proceedings of the 2012 {International} {Workshop} on {Self}-aware {Internet} of {Things}},
	publisher = {ACM},
	author = {Günalp, Ozan and Gürgen, Levent and Lestideau, Vincent and Lalanda, Philippe},
	year = {2012},
	keywords = {Autonomic computing, internet of things, Pervasive computing, service-oriented computing},
	pages = {19--24},
	file = {ACM Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/5PQZ3NGN/Günalp et al. - 2012 - Autonomic Pervasive Applications Driven by Abstrac.pdf:application/pdf}
}

@incollection{rouvoy_software_2009,
	address = {Berlin, Heidelberg},
	title = {Software {Engineering} for {Self}-{Adaptive} {Systems}},
	isbn = {978-3-642-02160-2},
	url = {http://dx.doi.org/10.1007/978-3-642-02161-9_9},
	abstract = {Self-adaptive component-based architectures facilitate the building of systems capable of dynamically adapting to varying execution context. Such a dynamic adaptation is particularly relevant in the domain of ubiquitous computing, where numerous and unexpected changes of the execution context prevail. In this paper, we introduce an extension of the MUSIC component-based planning framework that optimizes the overall utility of applications when such changes occur. In particular, we focus on changes in the service provider landscape in order to plug in interchangeably components and services providing the functionalities defined by the component framework. The dynamic adaptations are operated automatically for optimizing the application utility in a given execution context. Our resulting planning framework is described and validated on a motivating scenario of the MUSIC project.},
	urldate = {2015-09-02},
	publisher = {Springer-Verlag},
	author = {Rouvoy, Romain and Barone, Paolo and Ding, Yun and Eliassen, Frank and Hallsteinsen, Svein and Lorenzo, Jorge and Mamelli, Alessandro and Scholz, Ulrich},
	editor = {Cheng, Betty H. and Lemos, Rogério and Giese, Holger and Inverardi, Paola and Magee, Jeff},
	year = {2009},
	keywords = {Adaptation planning, component-based architectures, Self-adaptation, service-oriented architectures},
	pages = {164--182}
}

@incollection{andersson_software_2013,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Software {Engineering} {Processes} for {Self}-{Adaptive} {Systems}},
	copyright = {©2013 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-35812-8 978-3-642-35813-5},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-35813-5_3},
	language = {en},
	number = {7475},
	urldate = {2015-09-02},
	booktitle = {Software {Engineering} for {Self}-{Adaptive} {Systems} {II}},
	publisher = {Springer Berlin Heidelberg},
	author = {Andersson, Jesper and Baresi, Luciano and Bencomo, Nelly and Lemos, Rogério de and Gorla, Alessandra and Inverardi, Paola and Vogel, Thomas},
	editor = {Lemos, Rogério de and Giese, Holger and Müller, Hausi A. and Shaw, Mary},
	year = {2013},
	keywords = {Artificial Intelligence (incl. Robotics), Programming Languages, Compilers, Interpreters, Programming Techniques, Simulation and Modeling, Software Engineering, Software Engineering/Programming and Operating Systems},
	pages = {51--75},
	file = {Snapshot:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/ZMJS7VR8/10.html:text/html}
}

@article{capilla_overview_2014,
	title = {An {Overview} of {Dynamic} {Software} {Product} {Line} {Architectures} and {Techniques}: {Observations} from {Research} and {Industry}},
	volume = {91},
	issn = {0164-1212},
	shorttitle = {An {Overview} of {Dynamic} {Software} {Product} {Line} {Architectures} and {Techniques}},
	url = {http://dx.doi.org/10.1016/j.jss.2013.12.038},
	doi = {10.1016/j.jss.2013.12.038},
	abstract = {Over the last two decades, software product lines have been used successfully in industry for building families of systems of related products, maximizing reuse, and exploiting their variable and configurable options. In a changing world, modern software demands more and more adaptive features, many of them performed dynamically, and the requirements on the software architecture to support adaptation capabilities of systems are increasing in importance. Today, many embedded system families and application domains such as ecosystems, service-based applications, and self-adaptive systems demand runtime capabilities for flexible adaptation, reconfiguration, and post-deployment activities. However, as traditional software product line architectures fail to provide mechanisms for runtime adaptation and behavior of products, there is a shift toward designing more dynamic software architectures and building more adaptable software able to handle autonomous decision-making, according to varying conditions. Recent development approaches such as Dynamic Software Product Lines (DSPLs) attempt to face the challenges of the dynamic conditions of such systems but the state of these solution architectures is still immature. In order to provide a more comprehensive treatment of DSPL models and their solution architectures, in this research work we provide an overview of the state of the art and current techniques that, partially, attempt to face the many challenges of runtime variability mechanisms in the context of Dynamic Software Product Lines. We also provide an integrated view of the challenges and solutions that are necessary to support runtime variability mechanisms in DSPL models and software architectures.},
	urldate = {2015-09-02},
	journal = {J. Syst. Softw.},
	author = {Capilla, Rafael and Bosch, Jan and Trinidad, Pablo and Ruiz-Cortés, Antonio and Hinchey, Mike},
	month = may,
	year = {2014},
	keywords = {Dynamic Software Product Lines, Dynamic variability, Feature models, software architecture},
	pages = {3--23}
}

@inproceedings{gil_towards_2012,
	title = {Towards a {Decentralized} and {Self}-{Adaptive} {System} for {M}-{Learning} {Applications}},
	doi = {10.1109/WMUTE.2012.37},
	abstract = {Through the analysis of the different iterations of the Geometry Mobile (GEM) project, a mobile learning effort in the field of mathematics, we have identified a major architectural issue to be addressed in the design and implementation of m-learning applications. Due to the dynamic nature of the field many challenging requirements are continuously emerging. One of them relates to the possibility to support collaborative activities that demand sharing resources between students and their mobile devices in constantly changing conditions. These situations generate the need of using decentralized distributed architectures in which mobile devices can share resources to carry out the activity covering the concerns defined by the different stakeholders. This paper describes our current efforts connected to identifying a set of requirements for M-Learning activities. Thereafter, we elaborate on why a decentralized distributed system (DDS) can be used to provide a novel solution to tackle the mentioned above problems. Moreover, initial aspects related to the design of a DDS, including a self-adaptation mechanism are presented.},
	booktitle = {2012 {IEEE} {Seventh} {International} {Conference} on {Wireless}, {Mobile} and {Ubiquitous} {Technology} in {Education} ({WMUTE})},
	author = {Gil, D. and Andersson, J. and Milrad, M. and Sollervall, H.},
	month = mar,
	year = {2012},
	keywords = {architectural issue, Availability, collaborative activities, computer aided instruction, Computer architecture, decentralized distributed architectures, decentralized distributed system, decentralized system, geometry mobile project, M-Learning applications, Mobile communication, mobile computing, mobile devices, Mobile handsets, mobile learning, multivariable systems, Organizations, resource allocation, resource sharing, Self-adaptation, self-adaptation mechanism, self-adaptive system, Servers, Standards organizations},
	pages = {162--166},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/AN8T3JDI/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/HUR8U4S9/Gil et al. - 2012 - Towards a Decentralized and Self-Adaptive System f.pdf:application/pdf}
}

@inproceedings{weyns_challenges_2013,
	address = {New York, NY, USA},
	series = {{SESoS} '13},
	title = {On the {Challenges} of {Self}-adaptation in {Systems} of {Systems}},
	isbn = {978-1-4503-2048-1},
	url = {http://doi.acm.org/10.1145/2489850.2489860},
	doi = {10.1145/2489850.2489860},
	abstract = {A system of systems (SoS) integrates independently useful systems into a larger system. Examples are integrated surveillance systems and networked smart homes. A SoS offers functions to users that cannot be provided by its individual parts, but emerge as a combination of these. However, providing these functions with a required level of quality is difficult due to inherent uncertainties, such as systems that attach and detach at will and faults that are difficult to predict. Self-adaptation is a well-studied approach that enables a system to reason about itself and adapt to achieve particular quality objectives in the face of uncertainties and change. However, the inherently decentralized nature of SoS raises fundamental challenges to self-adaptation. This paper presents three architectural styles to realize self-adaptation in SoS, discusses key challenges for each style, and outlines starting points that could help to tackle these challenges.},
	urldate = {2015-09-02},
	booktitle = {Proceedings of the {First} {International} {Workshop} on {Software} {Engineering} for {Systems}-of-{Systems}},
	publisher = {ACM},
	author = {Weyns, Danny and Andersson, Jesper},
	year = {2013},
	keywords = {decentralized control, feedback loops, Self-adaptation, systems of systems},
	pages = {47--51},
	file = {ACM Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/CUQA5XBA/Weyns and Andersson - 2013 - On the Challenges of Self-adaptation in Systems of.pdf:application/pdf}
}

@article{blair_models_2009,
	title = {Models@ run.time},
	volume = {42},
	issn = {0018-9162},
	doi = {10.1109/MC.2009.326},
	abstract = {Runtime adaptation mechanisms that leverage software models extend the applicability of model-driven engineering techniques to the runtime environment. Contemporary mission-critical software systems are often expected to safely adapt to changes in their execution environment. Given the critical roles these systems play, it is often inconvenient to take them offline to adapt their functionality. Consequently, these systems are required, when feasible, to adapt their behavior at runtime with little or no human intervention. A promising approach to managing complexity in runtime environments is to develop adaptation mechanisms that leverage software models, referred to as models@run. time. Work on models@run.time seeks to extend the applicability of models produced in model-driven engineering (MDE) approaches to the runtime environment. Models@run. time is a causally connected self-representation of the associated system that emphasizes the structure, behavior, or goals of the system from a problem space perspective.},
	number = {10},
	journal = {Computer},
	author = {Blair, G. and Bencomo, N. and France, R.B.},
	month = oct,
	year = {2009},
	keywords = {Environmental management, Humans, mission-critical software systems, Mission critical systems, Model driven engineering, Model-driven engineering, model-driven engineering techniques, models@run.time, runtime adaptation mechanism, Runtime environment, Software development, software development management, Software Engineering, Software systems},
	pages = {22--27},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/KZ238U78/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/HCSWTU4Z/Blair et al. - 2009 - Models@ run.time.pdf:application/pdf}
}

@inproceedings{borgida_requirements_2013,
	address = {Piscataway, NJ, USA},
	series = {{MiSE} '13},
	title = {Requirements {Models} for {Design}- and {Runtime}: {A} {Position} {Paper}},
	isbn = {978-1-4673-6447-8},
	shorttitle = {Requirements {Models} for {Design}- and {Runtime}},
	url = {http://dl.acm.org/citation.cfm?id=2662737.2662752},
	abstract = {In this position paper we review the history of requirements models and conclude that a goal-oriented perspective offers a suitable abstraction for requirements analysis. We stake positions on the nature of modelling languages in general, and requirements modelling languages in particular. We then sketch some of the desirable features (... "requirements") of design-time and runtime requirements models and draw conclusions about their similarities and differences.},
	urldate = {2015-09-08},
	booktitle = {Proceedings of the 5th {International} {Workshop} on {Modeling} in {Software} {Engineering}},
	publisher = {IEEE Press},
	author = {Borgida, Alexander and Dalpiaz, Fabiano and Horkoff, Jennifer and Mylopoulos, John},
	year = {2013},
	pages = {62--68},
	file = {ACM Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/G4N78IVC/Borgida et al. - 2013 - Requirements Models for Design- and Runtime A Pos.pdf:application/pdf}
}

@article{dardenne_goal-directed_1993,
	title = {Goal-directed requirements acquisition},
	volume = {20},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/016764239390021G},
	doi = {10.1016/0167-6423(93)90021-G},
	abstract = {Requirements analysis includes a preliminary acquisition step where a global model for the specification of the system and its environment is elaborated. This model, called requirements model, involves concepts that are currently not supported by existing formal specification languages, such as goals to be achieved, agents to be assigned, alternatives to be negotiated, etc. The paper presents an approach to requirements acquisition which is driven by such higher-level concepts. Requirements models are acquired as instances of a conceptual meta-model. The latter can be represented as a graph where each node captures an abstraction such as, e.g., goal, action, agent, entity, or event, and where the edges capture semantic links between such abstractions. Well-formedness properties on nodes and links constrain their instances—that is, elements of requirements models. Requirements acquisition processes then correspond to particular ways of traversing the meta-model graph to acquire appropriate instances of the various nodes and links according to such constraints. Acquisition processes are governed by strategies telling which way to follow systematically in that graph; at each node specific tactics can be used to acquire the corresponding instances. The paper describes a significant portion of the meta-model related to system goals, and one particular acquisition strategy where the meta-model is traversed backwards from such goals. The meta-model and the strategy are illustrated by excerpts of a university library system.},
	number = {1–2},
	urldate = {2015-09-08},
	journal = {Science of Computer Programming},
	author = {Dardenne, Anne and van Lamsweerde, Axel and Fickas, Stephen},
	month = apr,
	year = {1993},
	keywords = {conceptual modeling, domain analysis, meta-level inference, nonfunctional requirements, Requirements engineering, specification acquisition, specification reuse},
	pages = {3--50},
	file = {ScienceDirect Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/NFZQDEVA/Dardenne et al. - 1993 - Goal-directed requirements acquisition.pdf:application/pdf;ScienceDirect Snapshot:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/WKR4ZBNP/016764239390021G.html:text/html}
}

@article{bryl_designing_2009,
	title = {Designing {Socio}-technical {Systems}: {From} {Stakeholder} {Goals} to {Social} {Networks}},
	volume = {14},
	issn = {0947-3602},
	shorttitle = {Designing {Socio}-technical {Systems}},
	url = {http://dx.doi.org/10.1007/s00766-008-0073-5},
	doi = {10.1007/s00766-008-0073-5},
	abstract = {Software systems are becoming an integral part of everyday life influencing organizational and social activities. This aggravates the need for a socio-technical perspective for requirements engineering, which allows for modelling and analyzing the composition and interaction of hardware and software components with human and organizational actors. In this setting, alternative requirements models have to be evaluated and selected finding a right trade-off between the technical and social dimensions. To address this problem, we propose a tool-supported process of requirements analysis for socio-technical systems, which adopts planning techniques for exploring the space of requirements alternatives and a number of social criteria for their evaluation. We illustrate the proposed approach with the help of a case study, conducted within the context of an EU project.},
	number = {1},
	urldate = {2015-09-08},
	journal = {Requir. Eng.},
	author = {Bryl, Volha and Giorgini, Paolo and Mylopoulos, John},
	month = feb,
	year = {2009},
	keywords = {Evaluation metrics, Exploring requirements alternatives, Planning, Socio-technical systems},
	pages = {47--70}
}

@article{viswanathan_uncertainty-aware_2015,
	title = {Uncertainty-{Aware} {Autonomic} {Resource} {Provisioning} for {Mobile} {Cloud} {Computing}},
	volume = {26},
	issn = {1045-9219},
	doi = {10.1109/TPDS.2014.2345057},
	abstract = {Mobile platforms are becoming the predominant medium of access to Internet services due to the tremendous increase in their computation and communication capabilities. However, enabling applications that require real-time in-the-field data collection and processing using mobile platforms is still challenging due to i) the insufficient computing capabilities and unavailability of complete data on individual mobile devices and ii) the prohibitive communication cost and response time involved in offloading data to remote computing resources such as cloud datacenters for centralized computation. A novel resource provisioning framework for organizing the heterogeneous sensing, computing, and communication capabilities of static and mobile devices in the vicinity in order to form an elastic resource pool-a hybrid static/mobile computing grid (also called a loosely-coupled mobile device cloud)-is presented. This local computing grid can be harnessed to enable innovative data-and compute-intensive mobile applications such as ubiquitous context-aware health and wellness monitoring of the elderly, distributed rainfall and flood-risk estimation, distributed object recognition and tracking, and content-based distributed multimedia search and sharing. In orderto address challenges such as the inherent uncertainty in the hybrid grid (in terms of network connectivity and device availability), the proposed role-based resource provisioning framework is imparted with autonomic capabilities, namely, self-organization, self-optimization, and self-healing. A thorough experimental analysis aimed at verifying and demonstrating the benefits brought by autonomic capabilities of the framework is also presented in detail.},
	number = {8},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Viswanathan, H. and Lee, Eun Kyung and Rodero, I. and Pompili, D.},
	month = aug,
	year = {2015},
	keywords = {Artificial neural networks, Autonomics, Availability, Batteries, cloud computing, communication capabilities, computation capabilities, compute-intensive mobile applications, distributed rainfall estimation, elastic resource pool, flood-risk estimation, grid computing, heterogeneous sensing, hybrid static grid, innovative data-mobile applications, Internet services, local computing grid, loosely-coupled mobile device cloud, mobile cloud computing, mobile clouds, Mobile communication, mobile computing, mobile computing grid, mobile devices, mobile grids, Mobile handsets, real-time in-the-field data collection, real-time systems, Resource management, role-based resource provisioning framework, self-healing, self-optimization, self-organization, static devices, ubiquitous context-aware health, Uncertainty, uncertainty, uncertainty-aware autonomic resource provisioning, wellness monitoring},
	pages = {2363--2372},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/9CIW7ASI/Viswanathan et al. - 2015 - Uncertainty-Aware Autonomic Resource Provisioning .html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/IZM7AGIK/Viswanathan et al. - 2015 - Uncertainty-Aware Autonomic Resource Provisioning .pdf:application/pdf}
}

@article{caporuscio_goprime:_2015,
	title = {{GoPrime}: a {Fully} {Decentralized} {Middleware} for {Utility}-{Aware} {Service} {Assembly}},
	volume = {PP},
	issn = {0098-5589},
	shorttitle = {{GoPrime}},
	doi = {10.1109/TSE.2015.2476797},
	abstract = {Modern applications, e.g., for pervasive computing scenarios, are increasingly reliant on systems built from multiple distributed components, which must be suitably composed to meet some specified functional and non-functional requirements. A key challenge is how to efficiently and effectively manage such complex systems. The use of self-management capabilities has been suggested as a possible way to address this challenge. To cope with the scalability and robustness issues of large distributed systems, self-management should ideally be architected in a decentralised way, where the overall system behaviour emerges from local decisions and interactions. Within this context, we propose GOPRIME, a fully decentralised middleware solution for the adaptive self-assembly of distributed services. The GOPRIME goal is to build and maintain an assembly of services that, besides functional requirements, fulfills also global quality-of-service and structural requirements. The key aspect of GOPRIME is the use of a gossip protocol to achieve decentralised information dissemination and decision making. To show the validity of our approach, we present results from the experimentation of a prototype implementation of GOPRIME in a mobile health application, and an extensive set of simulation experiments that assess the effectiveness of GOPRIME in terms of scalability, robustness and convergence speed.},
	number = {99},
	journal = {IEEE Transactions on Software Engineering},
	author = {Caporuscio, M. and Grassi, V. and Marzolla, M. and Mirandola, R.},
	year = {2015},
	keywords = {gossip protocol, Pervasive computing, Quality of service, runtime adaptation, Service-oriented architecture},
	pages = {1--1},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/A9QVP567/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/NK2HQABF/Caporuscio et al. - 2015 - GoPrime a Fully Decentralized Middleware for Util.pdf:application/pdf}
}

@inproceedings{bresciani_knowledge_2001,
	address = {New York, NY, USA},
	series = {{AGENTS} '01},
	title = {A {Knowledge} {Level} {Software} {Engineering} {Methodology} for {Agent} {Oriented} {Programming}},
	isbn = {1-58113-326-X},
	url = {http://doi.acm.org/10.1145/375735.376477},
	doi = {10.1145/375735.376477},
	abstract = {Our goal in this paper is to introduce and motivate a methodology, called {\textbackslash}emph\{Tropos\}, for building agent oriented software systems. Tropos is based on two key ideas. First, the notion of agent and all the related mentalistic notions (for instance: beliefs, goals, actions and plans) are used in all phases of software development, from the early analysis down to the actual implementation.  Second, Tropos covers also the very early phases of requirements analysis, thus allowing for a deeper understanding of the environment where the software must operate, and of the kind of interactions that should occur between software and human agents. The methodology is illustrated with the help of a case study.},
	urldate = {2015-09-10},
	booktitle = {Proceedings of the {Fifth} {International} {Conference} on {Autonomous} {Agents}},
	publisher = {ACM},
	author = {Bresciani, Paolo and Perini, Anna and Giorgini, Paolo and Giunchiglia, Fausto and Mylopoulos, John},
	year = {2001},
	keywords = {agent-based software engineering, design methodologies},
	pages = {648--655},
	file = {ACM Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/USUUGTHG/Bresciani et al. - 2001 - A Knowledge Level Software Engineering Methodology.pdf:application/pdf}
}

@article{bresciani_tropos:_2004,
	title = {Tropos: {An} {Agent}-{Oriented} {Software} {Development} {Methodology}},
	volume = {8},
	issn = {1387-2532, 1573-7454},
	shorttitle = {Tropos},
	url = {http://link.springer.com/article/10.1023/B%3AAGNT.0000018806.20944.ef},
	doi = {10.1023/B:AGNT.0000018806.20944.ef},
	language = {en},
	number = {3},
	urldate = {2015-09-10},
	journal = {Autonomous Agents and Multi-Agent Systems},
	author = {Bresciani, Paolo and Perini, Anna and Giorgini, Paolo and Giunchiglia, Fausto and Mylopoulos, John},
	month = may,
	year = {2004},
	keywords = {agent-oriented methodologies, agent-oriented software engineering, Artificial Intelligence (incl. Robotics), Data Structures, Cryptology and Information Theory, multi-agent systems, Software Engineering/Programming and Operating Systems, User Interfaces and Human Computer Interaction},
	pages = {203--236},
	file = {Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/HE8342H8/Bresciani et al. - 2004 - Tropos An Agent-Oriented Software Development Met.pdf:application/pdf;Snapshot:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/XIQJ5PJA/BAGNT.0000018806.20944.html:text/html}
}

@article{penserini_agent-based_2010,
	title = {Agent-based {Organizational} {Structures} for {Ambient} {Intelligence} {Scenarios}},
	volume = {2},
	issn = {1876-1364},
	url = {http://dl.acm.org/citation.cfm?id=2021081.2021086},
	abstract = {In a society where Information and Communication Technology (ICT) becomes a key component to improve the quality of our daily-life, systems' complexity dramatically increases to better accommodate to an inherent complexity of users' requirements, especially when dealing with pervasive computing. This poses demanding architectural requirements such as massive decentralization and disintermediation along with self-organizing properties. This higher level of system complexity has triggered the birth of several software engineering methodologies that adopt the agent paradigm. Design patterns are a well known approach for capturing and reusing knowledge related to known solution for recurrent architectural problems. Even though the importance of patterns is growing as systems become more and more complex, their development does not keep up with the evolving requirements, as traditional agent patterns are unable to support the majority of current complex social scenarios. This work motivates the need for new agent-based organizational structures that are more flexible than traditional agent patterns such as, Broker and Matchmaker. The newly suggested structure supports the dynamic nature of “Active Environment” where groups of agents are formed for service delivery and then dissolved with no central coordinating mechanism—i.e., gaining the disintermediation property. Serving as a case study, the PEACH and PIL projects have paved the way for experimenting with the new agent-based organizational structures that are more flexible and more suitable than traditional agent patterns for coping with ambient intelligence scenarios.},
	number = {4},
	urldate = {2015-09-10},
	journal = {J. Ambient Intell. Smart Environ.},
	author = {Penserini, Loris and Kuflik, Tsvi and Busetta, Paolo and Bresciani, Paolo},
	month = dec,
	year = {2010},
	keywords = {agent patterns, Ambient intelligence, AOSE methodologies, organizations of agent societies, service oriented computing},
	pages = {409--433}
}

@article{capra_carisma:_2003,
	title = {{CARISMA}: context-aware reflective middleware system for mobile applications},
	volume = {29},
	issn = {0098-5589},
	shorttitle = {{CARISMA}},
	doi = {10.1109/TSE.2003.1237173},
	abstract = {Mobile devices, such as mobile phones and personal digital assistants, have gained wide-spread popularity. These devices will increasingly be networked, thus enabling the construction of distributed applications that have to adapt to changes in context, such as variations in network bandwidth, battery power, connectivity, reachability of services and hosts, etc. In this paper, we describe CARISMA, a mobile computing middleware which exploits the principle of reflection to enhance the construction of adaptive and context-aware mobile applications. The middleware provides software engineers with primitives to describe how context changes should be handled using policies. These policies may conflict. We classify the different types of conflicts that may arise in mobile computing and argue that conflicts cannot be resolved statically at the time applications are designed, but, rather, need to be resolved at execution time. We demonstrate a method by which policy conflicts can be handled; this method uses a microeconomic approach that relies on a particular type of sealed-bid auction. We describe how this method is implemented in the CARISMA middleware architecture and sketch a distributed context-aware application for mobile devices to illustrate how the method works in practice. We show, by way of a systematic performance evaluation, that conflict resolution does not imply undue overheads, before comparing our research to related work and concluding the paper.},
	number = {10},
	journal = {IEEE Transactions on Software Engineering},
	author = {Capra, L. and Emmerich, W. and Mascolo, C.},
	month = oct,
	year = {2003},
	keywords = {Application software, Bandwidth, Batteries, CARISMA, conflict resolution, context awareness, Context-aware services, game theory, Middleware, mobile computing, Mobile handsets, mobile phones, personal digital assistants, Power engineering computing, Quality of service, Reflection},
	pages = {929--945},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/BIFZFPB6/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/3DS3KKQG/Capra et al. - 2003 - CARISMA context-aware reflective middleware syste.pdf:application/pdf}
}

@article{garlan_rainbow:_2004,
	title = {Rainbow: architecture-based self-adaptation with reusable infrastructure},
	volume = {37},
	issn = {0018-9162},
	shorttitle = {Rainbow},
	doi = {10.1109/MC.2004.175},
	abstract = {While attractive in principle, architecture-based self-adaptation raises a number of research and engineering challenges. First, the ability to handle a wide variety of systems must be addressed. Second, the need to reduce costs in adding external control to a system must be addressed. Our rainbow framework attempts to address both problems. By adopting an architecture-based approach, it provides reusable infrastructure together with mechanisms for specializing that infrastructure to the needs of specific systems. The specialization mechanisms let the developer of self-adaptation capabilities choose what aspects of the system to model and monitor, what conditions should trigger adaptation, and how to adapt the system.},
	number = {10},
	journal = {Computer},
	author = {Garlan, D. and Cheng, Shang-Wen and Huang, An-Cheng and Schmerl, B. and Steenkiste, P.},
	month = oct,
	year = {2004},
	keywords = {adaptation triggering, client-server systems, client-server system software architecture, Computer architecture, Computer interfaces, Computer languages, Control systems, cost reduction, Costs, Environmental management, monitoring, open systems, Protocols, Rainbow architecture-based self-adaptation, reusable infrastructure, software architecture, software reusability, Software systems, specialization mechanisms, system monitoring, system variety handling},
	pages = {46--54},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/C2Z5UXIN/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/FIFAKBZQ/Garlan et al. - 2004 - Rainbow architecture-based self-adaptation with r.pdf:application/pdf}
}

@article{oreizy_architecture-based_1999,
	title = {An architecture-based approach to self-adaptive software},
	volume = {14},
	issn = {1094-7167},
	doi = {10.1109/5254.769885},
	abstract = {Self-adaptive software requires high dependability robustness, adaptability, and availability. The article describes an infrastructure supporting two simultaneous processes in self-adaptive software: system evolution, the consistent application of change over time, and system adaptation, the cycle of detecting changing circumstances and planning and deploying responsive modifications},
	number = {3},
	journal = {IEEE Intelligent Systems and their Applications},
	author = {Oreizy, P. and Gorlick, M.M. and Taylor, R.N. and Heimhigner, D. and Johnson, G. and Medvidovic, N. and Quilici, A. and Rosenblum, D.S. and Wolf, A.L.},
	month = may,
	year = {1999},
	keywords = {adaptability, adaptive systems, Application software, architecture based approach, Availability, change management, changing circumstances, Costs, dependability robustness, Disaster management, Environmental management, management of change, monitoring, responsive modifications, Runtime, self-adaptive software, Sensor systems, simultaneous processes, software architecture, software fault tolerance, Software systems, system adaptation, system evolution, Traffic control, Unmanned aerial vehicles},
	pages = {54--62},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/GXEJHTRP/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/CND3N8AE/Oreizy et al. - 1999 - An architecture-based approach to self-adaptive so.pdf:application/pdf}
}

@incollection{garlan_software_2009,
	title = {Software {Architecture}-{Based} {Self}-{Adaptation}},
	copyright = {©2009 Springer Science+Business Media, LLC},
	isbn = {978-0-387-89827-8 978-0-387-89828-5},
	url = {http://link.springer.com/chapter/10.1007/978-0-387-89828-5_2},
	language = {en},
	urldate = {2015-09-10},
	booktitle = {Autonomic {Computing} and {Networking}},
	publisher = {Springer US},
	author = {Garlan, David and Schmerl, Bradley and Cheng, Shang-Wen},
	editor = {Zhang, Yan and Yang, Laurence Tianruo and Denko, Mieso K.},
	year = {2009},
	keywords = {Coding and Information Theory, Communications Engineering, Networks, Computer Communication Networks, Optimization, Signal, Image and Speech Processing},
	pages = {31--55},
	file = {Snapshot:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/E9ZDZ9AJ/10.html:text/html}
}

@inproceedings{dalpiaz_runtime_2013,
	title = {Runtime goal models: {Keynote}},
	shorttitle = {Runtime goal models},
	doi = {10.1109/RCIS.2013.6577674},
	abstract = {Goal models capture stakeholder requirements for a system-to-be, but also circumscribe a space of alternative specifications for fulfilling these requirements. Recent proposals for self-adaptive software systems rely on variants of goal models to support monitoring and adaptation functions. In such cases, goal models serve as mechanisms in terms of which systems reflect upon their requirements during their operation. We argue that existing proposals for using goal models at runtime are using design artifacts for purposes they were not intended, i.e., for reasoning about runtime system behavior. In this paper, we propose a conceptual distinction between Design-time Goal Models (DGMs)-used to design a system-and Runtime Goal Models (RGMs)-used to analyze a system's runtime behavior with respect to its requirements. RGMs extend DGMs with additional state, behavioral and historical information about the fulfillment of goals. We propose a syntactic structure for RGMs, a method for deriving them from DGMs, and runtime algorithms that support their monitoring.},
	booktitle = {2013 {IEEE} {Seventh} {International} {Conference} on {Research} {Challenges} in {Information} {Science} ({RCIS})},
	author = {Dalpiaz, F. and Borgida, A. and Horkoff, J. and Mylopoulos, J.},
	month = may,
	year = {2013},
	keywords = {design-time goal model, DGM, Erbium, formal specification, Goal reasoning, Requirements at runtime, RGM, runtime goal model, Runtime goal models, self-adaptive software system, Self-adaptive systems, syntactic structure, system monitoring, Xenon},
	pages = {1--11},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/SCJ9F7IG/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/AKE89QPZ/Dalpiaz et al. - 2013 - Runtime goal models Keynote.pdf:application/pdf}
}

@incollection{rouvoy_music:_2009,
	address = {Berlin, Heidelberg},
	title = {{MUSIC}: {Middleware} {Support} for {Self}-{Adaptation} in {Ubiquitous} and {Service}-{Oriented} {Environments}},
	isbn = {978-3-642-02160-2},
	url = {http://dx.doi.org/10.1007/978-3-642-02161-9_9},
	abstract = {Self-adaptive component-based architectures facilitate the building of systems capable of dynamically adapting to varying execution context. Such a dynamic adaptation is particularly relevant in the domain of ubiquitous computing, where numerous and unexpected changes of the execution context prevail. In this paper, we introduce an extension of the MUSIC component-based planning framework that optimizes the overall utility of applications when such changes occur. In particular, we focus on changes in the service provider landscape in order to plug in interchangeably components and services providing the functionalities defined by the component framework. The dynamic adaptations are operated automatically for optimizing the application utility in a given execution context. Our resulting planning framework is described and validated on a motivating scenario of the MUSIC project.},
	urldate = {2015-09-08},
	publisher = {Springer-Verlag},
	author = {Rouvoy, Romain and Barone, Paolo and Ding, Yun and Eliassen, Frank and Hallsteinsen, Svein and Lorenzo, Jorge and Mamelli, Alessandro and Scholz, Ulrich},
	editor = {Cheng, Betty H. and Lemos, Rogério and Giese, Holger and Inverardi, Paola and Magee, Jeff},
	year = {2009},
	keywords = {Adaptation planning, component-based architectures, Self-adaptation, service-oriented architectures},
	pages = {164--182}
}

@article{garlan_rainbow:_2004-1,
	title = {Rainbow: architecture-based self-adaptation with reusable infrastructure},
	volume = {37},
	issn = {0018-9162},
	shorttitle = {Rainbow},
	doi = {10.1109/MC.2004.175},
	abstract = {While attractive in principle, architecture-based self-adaptation raises a number of research and engineering challenges. First, the ability to handle a wide variety of systems must be addressed. Second, the need to reduce costs in adding external control to a system must be addressed. Our rainbow framework attempts to address both problems. By adopting an architecture-based approach, it provides reusable infrastructure together with mechanisms for specializing that infrastructure to the needs of specific systems. The specialization mechanisms let the developer of self-adaptation capabilities choose what aspects of the system to model and monitor, what conditions should trigger adaptation, and how to adapt the system.},
	number = {10},
	journal = {Computer},
	author = {Garlan, D. and Cheng, Shang-Wen and Huang, An-Cheng and Schmerl, B. and Steenkiste, P.},
	month = oct,
	year = {2004},
	keywords = {adaptation triggering, client-server systems, client-server system software architecture, Computer architecture, Computer interfaces, Computer languages, Control systems, cost reduction, Costs, Environmental management, monitoring, open systems, Protocols, Rainbow architecture-based self-adaptation, reusable infrastructure, software architecture, software reusability, Software systems, specialization mechanisms, system monitoring, system variety handling},
	pages = {46--54},
	file = {IEEE Xplore Abstract Record:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/ZP38ZJ65/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/grodrigues/.zotero/zotero/n8z1kv93.default/zotero/storage/PQ6QVE5E/Garlan et al. - 2004 - Rainbow architecture-based self-adaptation with r.pdf:application/pdf}
}